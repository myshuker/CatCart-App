{"version":3,"sources":["pages/Home.js","Components/ProductItem.js","api/products.js","pages/Products.js","pages/Cart.js","pages/ProductsDescrip.js","Components/CrtIcon.js","App.js","serviceWorker.js","index.js"],"names":["Home","ProductItem","props","product","className","src","image","alt","name","price","to","id","getAll","Promise","resolve","Products","state","products","ProductsApi","then","data","setState","this","map","key","Component","Cart","ProductsDescrip","loading","quantity","handleQuantity","event","target","value","match","params","find","item","getById","parseInt","setTimeout","width","description","type","min","max","onChange","CartIcon","App","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","path","exact","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.75fef76a.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function Home (){\n    return (\n      <div>\n        <h1>Home</h1>\n      </div>\n    );\n}","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nexport default function ProductItem(props) {\n  const { product } = props;\n  return (\n    <div>\n      <div className=\"card\">\n        <img src={product.image} className=\"card-img-top\" alt=\"...\" />\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{product.name}</h5>\n          <p className=\"card-text\">Price {product.price}</p>\n          <Link to={\"/products/\" + product.id}  className=\"btn btn-primary\"  > Details </Link>{\" \"}\n          \n        </div>\n      </div>\n    </div>\n  );\n}\n","import Products from \"./products.json\";\n\nexport function getAll() {\n  return Promise.resolve(Products);\n}\n\nexport function getById(id) {\n  const product= Products.find(item => item.id===id)\n  return Promise.resolve(product);\n\n}\n\n\nexport default {\n  getAll,\n};\n","import React, { Component } from \"react\";\nimport ProductItem from \"../Components/ProductItem\";\nimport ProductsApi from \"../api/products\";\n\n\nexport default class Products extends Component {\n  state = {\n    products: [],\n \n  };\n\n  componentDidMount() {\n    ProductsApi.getAll().then((data) => {\n      this.setState({\n        products: data,\n      });\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Products</h1>\n        <div className=\"row\">\n                {this.state.products.map((product) => (\n                    <div className={\"col-4\"} key={product.id}>\n                    <ProductItem product={product} />\n                    </div>\n                ))}\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nexport default function Cart() {\n  return (\n    <div>\n      <h1>Cart</h1>\n    </div>\n  );\n}\n","import React, { Component } from \"react\";\nimport { getById } from \"../api/products\";\n\nexport default class ProductsDescrip extends Component {\n  state = {\n    product: {},\n    loading: true,\n    quantity: 1,\n  };\n  componentDidMount() {\n    const id = this.props.match.params.id;\n    getById(parseInt(id)).then((product) => {\n      setTimeout(() => {\n        this.setState({\n          product,\n          loading: false,\n        });\n      }, 1000);\n    });\n  }\n\n  handleQuantity = (event) => {\n    this.setState({\n      quantity: event.target.value,\n    });\n  };\n\n  render() {\n    if (this.state.loading) {\n      return \"Loading.....\";\n    }\n    const product = this.state.product;\n    const quantity = this.state.quantity;\n\n    return (\n      <div>\n        <div className={\"row\"}>\n          <div className=\"col-6\">\n            <img src={product.image} width={\"100%\"} alt=\"cat\" />\n          </div>\n\n          <div className=\"col-6\">\n            <h1>{product.name}</h1>\n            <p>{product.price}</p>\n            <p>{product.description}</p>\n            <br /> <br />\n            <input\n              type=\"number\"\n              min=\"0\"\n              max=\"10\"\n              value={quantity}\n              onChange={this.handleQuantity}\n            />{\" \"}\n            <br /> <br />\n            <p>Total Price :{quantity * product.price} </p>\n            <button className=\"btn btn-primary\">Add to cart</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport './CartIcon.css'\nexport default function CartIcon(){\n    return <div id='cart-icon'>\n        <i className='fa fa-shopping-cart' ></i>\n        <span className='badge badge-danger' > 2 </span>\n    </div>\n}","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./pages/Home\";\nimport Products from \"./pages/Products\";\nimport Cart from \"./pages/Cart\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport ProductsDescrip from \"./pages/ProductsDescrip\";\nimport CartIcon from './Components/CrtIcon'\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"container\">\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          <a className=\"navbar-brand\" href=\"#\">\n            {\" \"}\n            CatsStore{\" \"}\n          </a>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarSupportedContent\"\n            aria-controls=\"navbarSupportedContent\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item active\">\n                <Link className=\"nav-link\" to=\"/\">\n                  {\" \"}\n                  Home{\" \"}\n                </Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/products\">\n                  {\" \"}\n                  Products{\" \"}\n                </Link>\n              </li>\n              <li className=\"nav-item\">\n                <Link className=\"nav-link\" to=\"/cart\">\n                  {\" \"}\n                  Cart{\" \"}\n                </Link>\n              </li>\n            </ul>\n          </div>\n          <CartIcon />\n        </nav>\n\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/products\" exact component={Products} />\n        <Route path=\"/products/:id\" exact component={ProductsDescrip} />\n        <Route path=\"/cart\" exact component={Cart} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}